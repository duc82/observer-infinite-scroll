{"version":3,"file":"index.umd.js","sources":["../src/InfiniteScroll.tsx"],"sourcesContent":["\"use client\";\r\nimport React, {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n  useLayoutEffect,\r\n} from \"react\";\r\n\r\nexport interface InfiniteScrollProps {\r\n  /** A `function` to load more items\r\n   * @property {Function} fetchMore\r\n   * @return {void | Promise<void>}\r\n   * @requires `true`\r\n   */\r\n  fetchMore: () => void | Promise<void>;\r\n  /** A `boolean` value to determine if there are more items to load\r\n   * @property {boolean} hasMore\r\n   * @requires `true`\r\n   */\r\n  hasMore: boolean;\r\n  /**\r\n   * An optional loading indicator to display while more items are being loaded.\r\n   * @property {JSX.Element} [loader]\r\n   * @optional\r\n   * @default <p>Loading...</p>\r\n   */\r\n  loader?: JSX.Element | null;\r\n  /**\r\n   * An optional message to display when there are no more items to load.\r\n   * @property {JSX.Element} [endMessage]\r\n   * @optional\r\n   * @default <p>No more items to load.</p>\r\n   */\r\n  endMessage?: JSX.Element | null;\r\n  /**\r\n   * An optional options object to pass to the IntersectionObserver constructor.\r\n   * @property {IntersectionObserverInit} [options]\r\n   * @optional\r\n   * @default { root: null, rootMargin: \"100px 0px 100px 0\", threshold: 0}\r\n   */\r\n  options?: IntersectionObserverInit;\r\n  /**\r\n   * An optional position value to set the scroll container's position.\r\n   * @property {\"top\" | \"bottom\"} [position]\r\n   * @optional\r\n   * @default \"bottom\"\r\n   */\r\n  position?: \"top\" | \"bottom\";\r\n  /**\r\n   * An optional class name to apply to the scroll container.\r\n   * @property {string} [className]\r\n   * @optional\r\n   */\r\n  className?: string;\r\n  /**\r\n   * An optional style object to apply to the scroll container.\r\n   * @property {React.CSSProperties} [style]\r\n   * @optional\r\n   */\r\n  style?: React.CSSProperties;\r\n  /**\r\n   * The items to display in the scroll container.\r\n   * @property {React.ReactNode} children\r\n   * @requires `true`\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A component that renders a scroll container with infinite scroll capabilities.\r\n * @property {InfiniteScrollProps} props\r\n * @returns {JSX.Element}\r\n * @version 1.2.4\r\n * @example\r\n * ```tsx\r\n * import React, { useState } from \"react\";\r\n * import InfiniteScroll from \"observer-infinite-scroll\";\r\n *\r\n * const App = () => {\r\n *   const [data, setData] = useState([]);\r\n *   const [hasMore, setHasMore] = useState(true);\r\n *\r\n *   const fetchMore = () => {\r\n *     // Load more items here\r\n *   };\r\n *\r\n *   return (\r\n *     <InfiniteScroll\r\n *       fetchMore={fetchMore}\r\n *       hasMore={hasMore}\r\n *       loader={<p>Loading...</p>}\r\n *       endMessage={<p>No more items to load.</p>}\r\n *     >\r\n *       {data.map((item) => (\r\n *         <div key={item.id}>{item.name}</div>\r\n *       ))}\r\n *     </InfiniteScroll>\r\n *   );\r\n * };\r\n * ```\r\n */\r\nconst InfiniteScroll = forwardRef<HTMLDivElement, InfiniteScrollProps>(\r\n  (\r\n    {\r\n      fetchMore,\r\n      hasMore,\r\n      loader = <p>Loading...</p>,\r\n      endMessage = <p>No more items to load.</p>,\r\n      options,\r\n      position = \"bottom\",\r\n      className,\r\n      style,\r\n      children,\r\n    },\r\n    ref\r\n  ): JSX.Element => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const loaderRef = useRef<HTMLDivElement>(null);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [prevContainer, setPrevContainer] = useState({\r\n      scrollHeight: 0,\r\n      scrollTop: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n      const el = loaderRef.current;\r\n      if (!el || isLoading || !hasMore) return;\r\n\r\n      const observer = new IntersectionObserver(async (entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          setIsLoading(true);\r\n\r\n          const promise = fetchMore();\r\n          if (promise instanceof Promise) {\r\n            await promise;\r\n          }\r\n\r\n          setIsLoading(false);\r\n          if (position === \"top\" && containerRef.current) {\r\n            setPrevContainer({\r\n              scrollHeight: containerRef.current.scrollHeight,\r\n              scrollTop: containerRef.current.scrollTop,\r\n            });\r\n          }\r\n        }\r\n      }, options);\r\n\r\n      observer.observe(el);\r\n\r\n      return () => {\r\n        observer.unobserve(el);\r\n      };\r\n    }, [hasMore, isLoading, fetchMore, options, position]);\r\n\r\n    useLayoutEffect(() => {\r\n      const container = containerRef.current;\r\n\r\n      if (!container || position !== \"top\") return;\r\n\r\n      const prevScrollHeight = prevContainer.scrollHeight;\r\n      const prevScrollTop = prevContainer.scrollTop;\r\n      const newScrollHeight = container.scrollHeight;\r\n      const newScrollTop = prevScrollTop + (newScrollHeight - prevScrollHeight);\r\n\r\n      container.scrollTop = newScrollTop;\r\n    }, [position, prevContainer]);\r\n\r\n    useImperativeHandle(ref, () => containerRef.current!, []);\r\n\r\n    return (\r\n      <div ref={containerRef} style={style} className={className}>\r\n        {position === \"bottom\" && children}\r\n        <div ref={loaderRef}>{hasMore ? loader : endMessage}</div>\r\n        {position === \"top\" && children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default InfiniteScroll;\r\n"],"names":["forwardRef","fetchMore","hasMore","loader","React","endMessage","options","position","className","style","children","ref","isLoading","setIsLoading","useState","loaderRef","useRef","containerRef","prevContainer","setPrevContainer","useEffect","el","observer","entries","promise","useLayoutEffect","container","prevScrollHeight","prevScrollTop","newScrollHeight","newScrollTop","useImperativeHandle"],"mappings":"kRAuGuBA,EAAA,WACrB,CACE,CACE,UAAAC,EACA,QAAAC,EACA,OAAAC,EAAUC,EAAA,cAAA,IAAA,KAAE,YAAU,EACtB,WAAAC,EAAcD,EAAA,cAAA,IAAA,KAAE,wBAAsB,EACtC,QAAAE,EACA,SAAAC,EAAW,SACX,UAAAC,EACA,MAAAC,EACA,SAAAC,GAEFC,IACgB,CAChB,KAAM,CAACC,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAC1CC,EAAYC,SAAuB,IAAI,EACvCC,EAAeD,SAAuB,IAAI,EAC1C,CAACE,EAAeC,CAAgB,EAAIL,WAAS,CACjD,aAAc,EACd,UAAW,CAAA,CACZ,EAEDM,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAKN,EAAU,QACjB,GAAA,CAACM,GAAMT,GAAa,CAACV,EAAS,OAElC,MAAMoB,EAAW,IAAI,qBAAqB,MAAOC,GAAY,CACvD,GAAAA,EAAQ,CAAC,EAAE,eAAgB,CAC7BV,EAAa,EAAI,EAEjB,MAAMW,EAAUvB,IACZuB,aAAmB,SACf,MAAAA,EAGRX,EAAa,EAAK,EACdN,IAAa,OAASU,EAAa,SACpBE,EAAA,CACf,aAAcF,EAAa,QAAQ,aACnC,UAAWA,EAAa,QAAQ,SAAA,CACjC,CAEL,GACCX,CAAO,EAEV,OAAAgB,EAAS,QAAQD,CAAE,EAEZ,IAAM,CACXC,EAAS,UAAUD,CAAE,CAAA,CACvB,EACC,CAACnB,EAASU,EAAWX,EAAWK,EAASC,CAAQ,CAAC,EAErDkB,EAAAA,gBAAgB,IAAM,CACpB,MAAMC,EAAYT,EAAa,QAE3B,GAAA,CAACS,GAAanB,IAAa,MAAO,OAEtC,MAAMoB,EAAmBT,EAAc,aACjCU,EAAgBV,EAAc,UAC9BW,EAAkBH,EAAU,aAC5BI,EAAeF,GAAiBC,EAAkBF,GAExDD,EAAU,UAAYI,CAAA,EACrB,CAACvB,EAAUW,CAAa,CAAC,EAE5Ba,EAAAA,oBAAoBpB,EAAK,IAAMM,EAAa,QAAU,CAAE,CAAA,kBAGrD,MAAI,CAAA,IAAKA,EAAc,MAAAR,EAAc,UAAAD,CAAA,EACnCD,IAAa,UAAYG,kBACzB,MAAI,CAAA,IAAKK,GAAYb,EAAUC,EAASE,CAAW,EACnDE,IAAa,OAASG,CACzB,CAEJ,CACF"}