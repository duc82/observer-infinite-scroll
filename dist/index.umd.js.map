{"version":3,"file":"index.umd.js","sources":["../src/InfiniteScroll.tsx"],"sourcesContent":["\"use client\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\n\r\nexport interface InfiniteScrollProps {\r\n  /** A `function` to load more items\r\n   * @property {Function} fetchMore\r\n   * @return {void | Promise<void>}\r\n   * @requires `true`\r\n   */\r\n  fetchMore: () => void | Promise<void>;\r\n  /** A `boolean` value to determine if there are more items to load\r\n   * @property {boolean} hasMore\r\n   * @requires `true`\r\n   */\r\n  hasMore: boolean;\r\n  /**\r\n   * An optional loading indicator to display while more items are being loaded.\r\n   * @property {JSX.Element} [loader]\r\n   * @optional\r\n   * @default <p>Loading...</p>\r\n   */\r\n  loader?: JSX.Element | null;\r\n  /**\r\n   * An optional message to display when there are no more items to load.\r\n   * @property {JSX.Element} [endMessage]\r\n   * @optional\r\n   * @default <p>No more items to load.</p>\r\n   */\r\n  endMessage?: JSX.Element | null;\r\n  /**\r\n   * An optional threshold value to trigger the `fetchMore` function before reaching the bottom of the scroll container.\r\n   * @property {number} [threshold]\r\n   * @optional\r\n   * @default 0.8\r\n   */\r\n  threshold?: number;\r\n  /**\r\n   * An optional position value to set the scroll container's position.\r\n   * @property {\"top\" | \"bottom\"} [position]\r\n   * @optional\r\n   * @default \"bottom\"\r\n   */\r\n  position?: \"top\" | \"bottom\";\r\n  /**\r\n   * An optional class name to apply to the scroll container.\r\n   * @property {string} [className]\r\n   * @optional\r\n   */\r\n  className?: string;\r\n  /**\r\n   * An optional style object to apply to the scroll container.\r\n   * @property {React.CSSProperties} [style]\r\n   * @optional\r\n   */\r\n  style?: React.CSSProperties;\r\n  /**\r\n   * The items to display in the scroll container.\r\n   * @property {React.ReactNode} children\r\n   * @requires `true`\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A component that renders a scroll container with infinite scroll capabilities.\r\n * @property {InfiniteScrollProps} props\r\n * @returns {JSX.Element}\r\n * @version 1.2.0\r\n */\r\nconst InfiniteScroll = ({\r\n  fetchMore,\r\n  hasMore,\r\n  loader = <p>Loading...</p>,\r\n  endMessage = <p>No more items to load.</p>,\r\n  threshold = 0.8,\r\n  position = \"bottom\",\r\n  className,\r\n  style,\r\n  children,\r\n}: InfiniteScrollProps): JSX.Element => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const fetchMoreRef = useRef<HTMLDivElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [prevContainerScrollHeight, setPrevContainerScrollHeight] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const el = fetchMoreRef.current;\r\n    if (!el || isLoading || !hasMore) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      async (entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          setIsLoading(true);\r\n\r\n          const promise = fetchMore();\r\n          if (promise instanceof Promise) {\r\n            await promise;\r\n          }\r\n\r\n          setIsLoading(false);\r\n          if (position === \"top\") {\r\n            setPrevContainerScrollHeight(\r\n              containerRef.current?.scrollHeight || 0\r\n            );\r\n          }\r\n        }\r\n      },\r\n      { threshold }\r\n    );\r\n\r\n    observer.observe(el);\r\n\r\n    return () => {\r\n      observer.unobserve(el);\r\n    };\r\n  }, [hasMore, isLoading, fetchMore, threshold, position]);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n\r\n    if (!container || position !== \"top\") return;\r\n\r\n    const prevScrollHeight = prevContainerScrollHeight;\r\n    const newScrollHeight = container.scrollHeight;\r\n    const newScrollTop = newScrollHeight - prevScrollHeight;\r\n\r\n    container.scrollTop = newScrollTop;\r\n  }, [position, children, prevContainerScrollHeight]);\r\n\r\n  return (\r\n    <div ref={containerRef} style={style} className={className}>\r\n      {position === \"bottom\" && children}\r\n      <div ref={fetchMoreRef}>\r\n        {hasMore && isLoading && loader}\r\n        {!hasMore && endMessage}\r\n      </div>\r\n      {position === \"top\" && children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfiniteScroll;\r\n"],"names":["fetchMore","hasMore","loader","React","endMessage","threshold","position","className","style","children","isLoading","setIsLoading","useState","fetchMoreRef","useRef","containerRef","prevContainerScrollHeight","setPrevContainerScrollHeight","useEffect","el","observer","entries","promise","_a","container","prevScrollHeight","newScrollTop"],"mappings":"iRAqEuB,CAAC,CACtB,UAAAA,EACA,QAAAC,EACA,OAAAC,EAAUC,EAAA,cAAA,IAAA,KAAE,YAAU,EACtB,WAAAC,EAAcD,EAAA,cAAA,IAAA,KAAE,wBAAsB,EACtC,UAAAE,EAAY,GACZ,SAAAC,EAAW,SACX,UAAAC,EACA,MAAAC,EACA,SAAAC,CACF,IAAwC,CACtC,KAAM,CAACC,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAC1CC,EAAeC,SAAuB,IAAI,EAC1CC,EAAeD,SAAuB,IAAI,EAC1C,CAACE,EAA2BC,CAA4B,EAAIL,WAAS,CAAC,EAE5EM,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAKN,EAAa,QACpB,GAAA,CAACM,GAAMT,GAAa,CAACT,EAAS,OAElC,MAAMmB,EAAW,IAAI,qBACnB,MAAOC,GAAY,OACb,GAAAA,EAAQ,CAAC,EAAE,eAAgB,CAC7BV,EAAa,EAAI,EAEjB,MAAMW,EAAUtB,IACZsB,aAAmB,SACf,MAAAA,EAGRX,EAAa,EAAK,EACdL,IAAa,OACfW,IACEM,EAAAR,EAAa,UAAb,YAAAQ,EAAsB,eAAgB,CAAA,CAG5C,CACF,EACA,CAAE,UAAAlB,CAAU,CAAA,EAGd,OAAAe,EAAS,QAAQD,CAAE,EAEZ,IAAM,CACXC,EAAS,UAAUD,CAAE,CAAA,CACvB,EACC,CAAClB,EAASS,EAAWV,EAAWK,EAAWC,CAAQ,CAAC,EAEvDY,EAAAA,UAAU,IAAM,CACd,MAAMM,EAAYT,EAAa,QAE3B,GAAA,CAACS,GAAalB,IAAa,MAAO,OAEtC,MAAMmB,EAAmBT,EAEnBU,EADkBF,EAAU,aACKC,EAEvCD,EAAU,UAAYE,CACrB,EAAA,CAACpB,EAAUG,EAAUO,CAAyB,CAAC,EAGhDb,EAAA,cAAC,OAAI,IAAKY,EAAc,MAAAP,EAAc,UAAAD,CACnC,EAAAD,IAAa,UAAYG,EACzBN,EAAA,cAAA,MAAA,CAAI,IAAKU,GACPZ,GAAWS,GAAaR,EACxB,CAACD,GAAWG,CACf,EACCE,IAAa,OAASG,CACzB,CAEJ"}