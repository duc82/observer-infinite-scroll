{"version":3,"file":"index.es.js","sources":["../src/InfiniteScroll.tsx"],"sourcesContent":["\"use client\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\n\r\nexport interface InfiniteScrollProps {\r\n  /** A `function` to load more items\r\n   * @property {Function} fetchMore\r\n   * @return {void | Promise<void>}\r\n   * @requires `true`\r\n   */\r\n  fetchMore: () => void | Promise<void>;\r\n  /** A `boolean` value to determine if there are more items to load\r\n   * @property {boolean} hasMore\r\n   * @requires `true`\r\n   */\r\n  hasMore: boolean;\r\n  /**\r\n   * An optional loading indicator to display while more items are being loaded.\r\n   * @property {JSX.Element} [loader]\r\n   * @optional\r\n   * @default <p>Loading...</p>\r\n   */\r\n  loader?: JSX.Element | null;\r\n  /**\r\n   * An optional message to display when there are no more items to load.\r\n   * @property {JSX.Element} [endMessage]\r\n   * @optional\r\n   * @default <p>No more items to load.</p>\r\n   */\r\n  endMessage?: JSX.Element | null;\r\n  /**\r\n   * An optional threshold value to trigger the `fetchMore` function before reaching the bottom of the scroll container.\r\n   * @property {number} [threshold]\r\n   * @optional\r\n   * @default 0.8\r\n   */\r\n  threshold?: number;\r\n  /**\r\n   * An optional position value to set the scroll container's position.\r\n   * @property {\"top\" | \"bottom\"} [position]\r\n   * @optional\r\n   * @default \"bottom\"\r\n   */\r\n  position?: \"top\" | \"bottom\";\r\n  /**\r\n   * An optional class name to apply to the scroll container.\r\n   * @property {string} [className]\r\n   * @optional\r\n   */\r\n  className?: string;\r\n  /**\r\n   * An optional style object to apply to the scroll container.\r\n   * @property {React.CSSProperties} [style]\r\n   * @optional\r\n   */\r\n  style?: React.CSSProperties;\r\n  /**\r\n   * The items to display in the scroll container.\r\n   * @property {React.ReactNode} children\r\n   * @requires `true`\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A component that renders a scroll container with infinite scroll capabilities.\r\n * @property {InfiniteScrollProps} props\r\n * @returns {JSX.Element}\r\n * @version 1.2.0\r\n */\r\nconst InfiniteScroll = ({\r\n  fetchMore,\r\n  hasMore,\r\n  loader = <p>Loading...</p>,\r\n  endMessage = <p>No more items to load.</p>,\r\n  threshold = 0.8,\r\n  position = \"bottom\",\r\n  className,\r\n  style,\r\n  children,\r\n}: InfiniteScrollProps): JSX.Element => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const fetchMoreRef = useRef<HTMLDivElement>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [prevContainerScrollHeight, setPrevContainerScrollHeight] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const el = fetchMoreRef.current;\r\n    if (!el || isLoading || !hasMore) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      async (entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          setIsLoading(true);\r\n\r\n          const promise = fetchMore();\r\n          if (promise instanceof Promise) {\r\n            await promise;\r\n          }\r\n\r\n          setIsLoading(false);\r\n          if (position === \"top\") {\r\n            setPrevContainerScrollHeight(\r\n              containerRef.current?.scrollHeight || 0\r\n            );\r\n          }\r\n        }\r\n      },\r\n      { threshold }\r\n    );\r\n\r\n    observer.observe(el);\r\n\r\n    return () => {\r\n      observer.unobserve(el);\r\n    };\r\n  }, [hasMore, isLoading, fetchMore, threshold, position]);\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current;\r\n\r\n    if (!container || position !== \"top\") return;\r\n\r\n    const prevScrollHeight = prevContainerScrollHeight;\r\n    const newScrollHeight = container.scrollHeight;\r\n    const newScrollTop = newScrollHeight - prevScrollHeight;\r\n\r\n    container.scrollTop = newScrollTop;\r\n  }, [position, children, prevContainerScrollHeight]);\r\n\r\n  return (\r\n    <div ref={containerRef} style={style} className={className}>\r\n      {position === \"bottom\" && children}\r\n      <div ref={fetchMoreRef}>\r\n        {hasMore && isLoading && loader}\r\n        {!hasMore && endMessage}\r\n      </div>\r\n      {position === \"top\" && children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfiniteScroll;\r\n"],"names":["InfiniteScroll","fetchMore","hasMore","loader","React","endMessage","threshold","position","className","style","children","isLoading","setIsLoading","useState","fetchMoreRef","useRef","containerRef","prevContainerScrollHeight","setPrevContainerScrollHeight","useEffect","el","observer","entries","promise","_a","container","prevScrollHeight","newScrollTop"],"mappings":";AAqEA,MAAMA,IAAiB,CAAC;AAAA,EACtB,WAAAC;AAAA,EACA,SAAAC;AAAA,EACA,QAAAC,IAAU,gBAAAC,EAAA,cAAA,KAAA,MAAE,YAAU;AAAA,EACtB,YAAAC,IAAc,gBAAAD,EAAA,cAAA,KAAA,MAAE,wBAAsB;AAAA,EACtC,WAAAE,IAAY;AAAA,EACZ,UAAAC,IAAW;AAAA,EACX,WAAAC;AAAA,EACA,OAAAC;AAAA,EACA,UAAAC;AACF,MAAwC;AACtC,QAAM,CAACC,GAAWC,CAAY,IAAIC,EAAS,EAAK,GAC1CC,IAAeC,EAAuB,IAAI,GAC1CC,IAAeD,EAAuB,IAAI,GAC1C,CAACE,GAA2BC,CAA4B,IAAIL,EAAS,CAAC;AAE5E,SAAAM,EAAU,MAAM;AACd,UAAMC,IAAKN,EAAa;AACpB,QAAA,CAACM,KAAMT,KAAa,CAACT;AAAS;AAElC,UAAMmB,IAAW,IAAI;AAAA,MACnB,OAAOC,MAAY;;AACb,YAAAA,EAAQ,CAAC,EAAE,gBAAgB;AAC7B,UAAAV,EAAa,EAAI;AAEjB,gBAAMW,IAAUtB;AAChB,UAAIsB,aAAmB,WACf,MAAAA,GAGRX,EAAa,EAAK,GACdL,MAAa,SACfW;AAAA,cACEM,IAAAR,EAAa,YAAb,gBAAAQ,EAAsB,iBAAgB;AAAA,UAAA;AAAA,QAG5C;AAAA,MACF;AAAA,MACA,EAAE,WAAAlB,EAAU;AAAA,IAAA;AAGd,WAAAe,EAAS,QAAQD,CAAE,GAEZ,MAAM;AACX,MAAAC,EAAS,UAAUD,CAAE;AAAA,IAAA;AAAA,EACvB,GACC,CAAClB,GAASS,GAAWV,GAAWK,GAAWC,CAAQ,CAAC,GAEvDY,EAAU,MAAM;AACd,UAAMM,IAAYT,EAAa;AAE3B,QAAA,CAACS,KAAalB,MAAa;AAAO;AAEtC,UAAMmB,IAAmBT,GAEnBU,IADkBF,EAAU,eACKC;AAEvC,IAAAD,EAAU,YAAYE;AAAA,EACrB,GAAA,CAACpB,GAAUG,GAAUO,CAAyB,CAAC,GAGhD,gBAAAb,EAAA,cAAC,SAAI,KAAKY,GAAc,OAAAP,GAAc,WAAAD,EACnC,GAAAD,MAAa,YAAYG,GACzB,gBAAAN,EAAA,cAAA,OAAA,EAAI,KAAKU,KACPZ,KAAWS,KAAaR,GACxB,CAACD,KAAWG,CACf,GACCE,MAAa,SAASG,CACzB;AAEJ;"}