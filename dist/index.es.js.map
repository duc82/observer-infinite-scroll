{"version":3,"file":"index.es.js","sources":["../src/InfiniteScroll.tsx"],"sourcesContent":["\"use client\";\r\nimport React, {\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  forwardRef,\r\n  useImperativeHandle,\r\n  useLayoutEffect,\r\n} from \"react\";\r\n\r\nexport interface InfiniteScrollProps {\r\n  /** A `function` to load more items\r\n   * @property {Function} fetchMore\r\n   * @return {void | Promise<void>}\r\n   * @requires `true`\r\n   */\r\n  fetchMore: () => void | Promise<void>;\r\n  /** A `boolean` value to determine if there are more items to load\r\n   * @property {boolean} hasMore\r\n   * @requires `true`\r\n   */\r\n  hasMore: boolean;\r\n  /**\r\n   * An optional loading indicator to display while more items are being loaded.\r\n   * @property {JSX.Element} [loader]\r\n   * @optional\r\n   * @default <p>Loading...</p>\r\n   */\r\n  loader?: JSX.Element | null;\r\n  /**\r\n   * An optional message to display when there are no more items to load.\r\n   * @property {JSX.Element} [endMessage]\r\n   * @optional\r\n   * @default <p>No more items to load.</p>\r\n   */\r\n  endMessage?: JSX.Element | null;\r\n  /**\r\n   * An optional options object to pass to the IntersectionObserver constructor.\r\n   * @property {IntersectionObserverInit} [options]\r\n   * @optional\r\n   * @default { root: null, rootMargin: \"100px 0px 100px 0\", threshold: 0}\r\n   */\r\n  options?: IntersectionObserverInit;\r\n  /**\r\n   * An optional position value to set the scroll container's position.\r\n   * @property {\"top\" | \"bottom\"} [position]\r\n   * @optional\r\n   * @default \"bottom\"\r\n   */\r\n  position?: \"top\" | \"bottom\";\r\n  /**\r\n   * An optional class name to apply to the scroll container.\r\n   * @property {string} [className]\r\n   * @optional\r\n   */\r\n  className?: string;\r\n  /**\r\n   * An optional style object to apply to the scroll container.\r\n   * @property {React.CSSProperties} [style]\r\n   * @optional\r\n   */\r\n  style?: React.CSSProperties;\r\n  /**\r\n   * The items to display in the scroll container.\r\n   * @property {React.ReactNode} children\r\n   * @requires `true`\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A component that renders a scroll container with infinite scroll capabilities.\r\n * @property {InfiniteScrollProps} props\r\n * @returns {JSX.Element}\r\n * @version 1.2.4\r\n * @example\r\n * ```tsx\r\n * import React, { useState } from \"react\";\r\n * import InfiniteScroll from \"observer-infinite-scroll\";\r\n *\r\n * const App = () => {\r\n *   const [data, setData] = useState([]);\r\n *   const [hasMore, setHasMore] = useState(true);\r\n *\r\n *   const fetchMore = () => {\r\n *     // Load more items here\r\n *   };\r\n *\r\n *   return (\r\n *     <InfiniteScroll\r\n *       fetchMore={fetchMore}\r\n *       hasMore={hasMore}\r\n *       loader={<p>Loading...</p>}\r\n *       endMessage={<p>No more items to load.</p>}\r\n *     >\r\n *       {data.map((item) => (\r\n *         <div key={item.id}>{item.name}</div>\r\n *       ))}\r\n *     </InfiniteScroll>\r\n *   );\r\n * };\r\n * ```\r\n */\r\nconst InfiniteScroll = forwardRef<HTMLDivElement, InfiniteScrollProps>(\r\n  (\r\n    {\r\n      fetchMore,\r\n      hasMore,\r\n      loader = <p>Loading...</p>,\r\n      endMessage = <p>No more items to load.</p>,\r\n      options,\r\n      position = \"bottom\",\r\n      className,\r\n      style,\r\n      children,\r\n    },\r\n    ref\r\n  ): JSX.Element => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const loaderRef = useRef<HTMLDivElement>(null);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [prevContainer, setPrevContainer] = useState({\r\n      scrollHeight: 0,\r\n      scrollTop: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n      const el = loaderRef.current;\r\n      if (!el || isLoading || !hasMore) return;\r\n\r\n      const observer = new IntersectionObserver(async (entries) => {\r\n        if (entries[0].isIntersecting) {\r\n          setIsLoading(true);\r\n\r\n          const promise = fetchMore();\r\n          if (promise instanceof Promise) {\r\n            await promise;\r\n          }\r\n\r\n          setIsLoading(false);\r\n          if (position === \"top\" && containerRef.current) {\r\n            setPrevContainer({\r\n              scrollHeight: containerRef.current.scrollHeight,\r\n              scrollTop: containerRef.current.scrollTop,\r\n            });\r\n          }\r\n        }\r\n      }, options);\r\n\r\n      observer.observe(el);\r\n\r\n      return () => {\r\n        observer.unobserve(el);\r\n      };\r\n    }, [hasMore, isLoading, fetchMore, options, position]);\r\n\r\n    useLayoutEffect(() => {\r\n      const container = containerRef.current;\r\n\r\n      if (!container || position !== \"top\") return;\r\n\r\n      const prevScrollHeight = prevContainer.scrollHeight;\r\n      const prevScrollTop = prevContainer.scrollTop;\r\n      const newScrollHeight = container.scrollHeight;\r\n      const newScrollTop = prevScrollTop + (newScrollHeight - prevScrollHeight);\r\n\r\n      container.scrollTop = newScrollTop;\r\n    }, [position, prevContainer]);\r\n\r\n    useImperativeHandle(ref, () => containerRef.current!, []);\r\n\r\n    return (\r\n      <div ref={containerRef} style={style} className={className}>\r\n        {position === \"bottom\" && children}\r\n        <div ref={loaderRef}>{hasMore ? loader : endMessage}</div>\r\n        {position === \"top\" && children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default InfiniteScroll;\r\n"],"names":["InfiniteScroll","forwardRef","fetchMore","hasMore","loader","React","endMessage","options","position","className","style","children","ref","isLoading","setIsLoading","useState","loaderRef","useRef","containerRef","prevContainer","setPrevContainer","useEffect","el","observer","entries","promise","useLayoutEffect","container","prevScrollHeight","prevScrollTop","newScrollHeight","newScrollTop","useImperativeHandle"],"mappings":";AAuGA,MAAMA,IAAiBC;AAAA,EACrB,CACE;AAAA,IACE,WAAAC;AAAA,IACA,SAAAC;AAAA,IACA,QAAAC,IAAU,gBAAAC,EAAA,cAAA,KAAA,MAAE,YAAU;AAAA,IACtB,YAAAC,IAAc,gBAAAD,EAAA,cAAA,KAAA,MAAE,wBAAsB;AAAA,IACtC,SAAAE;AAAA,IACA,UAAAC,IAAW;AAAA,IACX,WAAAC;AAAA,IACA,OAAAC;AAAA,IACA,UAAAC;AAAA,KAEFC,MACgB;AAChB,UAAM,CAACC,GAAWC,CAAY,IAAIC,EAAS,EAAK,GAC1CC,IAAYC,EAAuB,IAAI,GACvCC,IAAeD,EAAuB,IAAI,GAC1C,CAACE,GAAeC,CAAgB,IAAIL,EAAS;AAAA,MACjD,cAAc;AAAA,MACd,WAAW;AAAA,IAAA,CACZ;AAED,WAAAM,EAAU,MAAM;AACd,YAAMC,IAAKN,EAAU;AACjB,UAAA,CAACM,KAAMT,KAAa,CAACV;AAAS;AAElC,YAAMoB,IAAW,IAAI,qBAAqB,OAAOC,MAAY;AACvD,YAAAA,EAAQ,CAAC,EAAE,gBAAgB;AAC7B,UAAAV,EAAa,EAAI;AAEjB,gBAAMW,IAAUvB;AAChB,UAAIuB,aAAmB,WACf,MAAAA,GAGRX,EAAa,EAAK,GACdN,MAAa,SAASU,EAAa,WACpBE,EAAA;AAAA,YACf,cAAcF,EAAa,QAAQ;AAAA,YACnC,WAAWA,EAAa,QAAQ;AAAA,UAAA,CACjC;AAAA,QAEL;AAAA,SACCX,CAAO;AAEV,aAAAgB,EAAS,QAAQD,CAAE,GAEZ,MAAM;AACX,QAAAC,EAAS,UAAUD,CAAE;AAAA,MAAA;AAAA,IACvB,GACC,CAACnB,GAASU,GAAWX,GAAWK,GAASC,CAAQ,CAAC,GAErDkB,EAAgB,MAAM;AACpB,YAAMC,IAAYT,EAAa;AAE3B,UAAA,CAACS,KAAanB,MAAa;AAAO;AAEtC,YAAMoB,IAAmBT,EAAc,cACjCU,IAAgBV,EAAc,WAC9BW,IAAkBH,EAAU,cAC5BI,IAAeF,KAAiBC,IAAkBF;AAExD,MAAAD,EAAU,YAAYI;AAAA,IAAA,GACrB,CAACvB,GAAUW,CAAa,CAAC,GAE5Ba,EAAoBpB,GAAK,MAAMM,EAAa,SAAU,CAAE,CAAA,mCAGrD,OAAI,EAAA,KAAKA,GAAc,OAAAR,GAAc,WAAAD,EAAA,GACnCD,MAAa,YAAYG,mCACzB,OAAI,EAAA,KAAKK,KAAYb,IAAUC,IAASE,CAAW,GACnDE,MAAa,SAASG,CACzB;AAAA,EAEJ;AACF;"}