{"version":3,"file":"index.es.js","sources":["../src/InfiniteScroll.tsx"],"sourcesContent":["\"use client\";\r\nimport React, { useState, useRef, useEffect, forwardRef } from \"react\";\r\n\r\nexport interface InfiniteScrollProps {\r\n  /** A `function` to load more items\r\n   * @property {Function} fetchMore\r\n   * @return {void}\r\n   * @requires `true`\r\n   */\r\n  fetchMore: () => void;\r\n  /** A `boolean` value to determine if there are more items to load\r\n   * @property {boolean} hasMore\r\n   * @requires `true`\r\n   */\r\n  hasMore: boolean;\r\n  /**\r\n   * An optional loading indicator to display while more items are being loaded.\r\n   * @property {JSX.Element} [loader]\r\n   * @optional\r\n   * @default <p>Loading...</p>\r\n   */\r\n  loader?: JSX.Element | null;\r\n  /**\r\n   * An optional message to display when there are no more items to load.\r\n   * @property {JSX.Element} [endMessage]\r\n   * @optional\r\n   * @default <p>No more items to load.</p>\r\n   */\r\n  endMessage?: JSX.Element | null;\r\n  /**\r\n   * An optional threshold value to trigger the `fetchMore` function before reaching the bottom of the scroll container.\r\n   * @property {number} [threshold]\r\n   * @optional\r\n   * @default 0.8\r\n   */\r\n  threshold?: number;\r\n  /**\r\n   * An optional position value to set the scroll container's position.\r\n   * @property {\"top\" | \"bottom\"} [position]\r\n   * @optional\r\n   * @default \"bottom\"\r\n   */\r\n  position?: \"top\" | \"bottom\";\r\n  /**\r\n   * An optional class name to apply to the scroll container.\r\n   * @property {string} [className]\r\n   * @optional\r\n   */\r\n  className?: string;\r\n  /**\r\n   * An optional style object to apply to the scroll container.\r\n   * @property {React.CSSProperties} [style]\r\n   * @optional\r\n   */\r\n  style?: React.CSSProperties;\r\n  /**\r\n   * The items to display in the scroll container.\r\n   * @property {React.ReactNode} children\r\n   * @requires `true`\r\n   */\r\n  children: React.ReactNode;\r\n}\r\n\r\n/**\r\n * A component that renders a scroll container with infinite scroll capabilities.\r\n * @property {InfiniteScrollProps} props\r\n * @returns {JSX.Element}\r\n * @version 1.1.7\r\n */\r\nconst InfiniteScroll = forwardRef<HTMLDivElement, InfiniteScrollProps>(\r\n  (\r\n    {\r\n      fetchMore,\r\n      hasMore,\r\n      loader = <p>Loading...</p>,\r\n      endMessage = <p>No more items to load.</p>,\r\n      threshold = 0.8,\r\n      position = \"bottom\",\r\n      className,\r\n      style,\r\n      children,\r\n    },\r\n    ref\r\n  ): JSX.Element => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const fetchMoreRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n      const el = fetchMoreRef.current;\r\n\r\n      const observer = new IntersectionObserver(\r\n        (entries) => {\r\n          if (entries[0].isIntersecting && !isLoading && hasMore) {\r\n            setIsLoading(true);\r\n            fetchMore();\r\n          }\r\n        },\r\n        { threshold }\r\n      );\r\n\r\n      if (el) {\r\n        observer.observe(el);\r\n      }\r\n\r\n      return () => {\r\n        if (el) {\r\n          observer.unobserve(el);\r\n        }\r\n      };\r\n    }, [hasMore, isLoading, fetchMore, threshold]);\r\n\r\n    useEffect(() => {\r\n      setIsLoading(false);\r\n    }, [fetchMore]);\r\n\r\n    return (\r\n      <div ref={ref} style={style} className={className}>\r\n        {position === \"bottom\" && children}\r\n        {hasMore ? <div ref={fetchMoreRef}>{loader}</div> : endMessage}\r\n        {position === \"top\" && children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default InfiniteScroll;\r\n"],"names":["InfiniteScroll","forwardRef","fetchMore","hasMore","loader","React","endMessage","threshold","position","className","style","children","ref","isLoading","setIsLoading","useState","fetchMoreRef","useRef","useEffect","el","observer","entries"],"mappings":";AAqEA,MAAMA,IAAiBC;AAAA,EACrB,CACE;AAAA,IACE,WAAAC;AAAA,IACA,SAAAC;AAAA,IACA,QAAAC,IAAU,gBAAAC,EAAA,cAAA,KAAA,MAAE,YAAU;AAAA,IACtB,YAAAC,IAAc,gBAAAD,EAAA,cAAA,KAAA,MAAE,wBAAsB;AAAA,IACtC,WAAAE,IAAY;AAAA,IACZ,UAAAC,IAAW;AAAA,IACX,WAAAC;AAAA,IACA,OAAAC;AAAA,IACA,UAAAC;AAAA,KAEFC,MACgB;AAChB,UAAM,CAACC,GAAWC,CAAY,IAAIC,EAAS,EAAK,GAC1CC,IAAeC,EAAuB,IAAI;AAEhD,WAAAC,EAAU,MAAM;AACd,YAAMC,IAAKH,EAAa,SAElBI,IAAW,IAAI;AAAA,QACnB,CAACC,MAAY;AACX,UAAIA,EAAQ,CAAC,EAAE,kBAAkB,CAACR,KAAaV,MAC7CW,EAAa,EAAI,GACPZ;QAEd;AAAA,QACA,EAAE,WAAAK,EAAU;AAAA,MAAA;AAGd,aAAIY,KACFC,EAAS,QAAQD,CAAE,GAGd,MAAM;AACX,QAAIA,KACFC,EAAS,UAAUD,CAAE;AAAA,MACvB;AAAA,OAED,CAAChB,GAASU,GAAWX,GAAWK,CAAS,CAAC,GAE7CW,EAAU,MAAM;AACd,MAAAJ,EAAa,EAAK;AAAA,IAAA,GACjB,CAACZ,CAAS,CAAC,mCAGX,OAAI,EAAA,KAAAU,GAAU,OAAAF,GAAc,WAAAD,KAC1BD,MAAa,YAAYG,GACzBR,IAAW,gBAAAE,EAAA,cAAA,OAAA,EAAI,KAAKW,EAAe,GAAAZ,CAAO,IAASE,GACnDE,MAAa,SAASG,CACzB;AAAA,EAEJ;AACF;"}